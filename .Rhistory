geom_rect(ymin = -Inf, ymax = Inf, xmin = -30, xmax = -50, fill = fill_colors[2]) +
geom_rect(ymin = -Inf, ymax = Inf, xmin = -50, xmax = -80, fill = fill_colors[3]) +
geom_rect(ymin = -Inf, ymax = Inf, xmin = -80, xmax = -100, fill = fill_colors[4]) +
# Add vertical dashed lines
geom_vline(xintercept = c(-30, -50, -80), lty = 2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray50") +
# Error bars and points for species
geom_errorbarh(aes(xmin = decade_change_lwr, xmax = decade_change_upr, height = 0.2)) +
geom_point(aes(shape = biogeog), size = 4) +
# Add facets for taxa with free y scale and spacing
ggforce::facet_col(taxon ~ ., scales = "free_y", space = "free") +
# Customize shapes for the different biogeographies
scale_shape_manual(values = c(
"temperate (cool)" = 16,
"temperate (warm)" = 17,
"tropical" = 15
)) +
# Axis labels and legend title
labs(
x = "Rate of decline over a decade",
y = "Species Name",
shape = ""
) +
# Apply minimal theme and customizations
theme_minimal() +
theme(
legend.position = "right",
panel.grid.major.y = element_blank(),  # Remove grid lines for y-axis
axis.title.y = element_blank(),        # Remove y-axis title
axis.text.y = element_text(face = "italic"),  # Italicize species names
plot.title = element_text(hjust = 0.5),
strip.text = element_text(size = 11, hjust = 0, vjust = 1)  # Facet label style
)
plot(nonendemicsdecade)
#ENDEMICS
all_species_endemic <- trending_species %>%
filter(endemism == "endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
#ENDEMICS
all_species_endemic <- alltime_change %>%
filter(endemism == "endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
all_species_non_endemic <- alltime_change %>%
filter(endemism == "non-endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
View(all_species_endemic)
read_csv(all_species_endemic, "all_species_endemic.csv")
View(all_species_endemic)
read_csv("all_species_endemic.csv")
write_csv(all_species_endemic, "all_species_endemic.csv")
write_csv(all_species_nonendemic, "all_species_nonendemic.csv")
write_csv(all_species_non_endemic, "all_species_nonendemic.csv")
View(all_species_endemic)
View(result_algae)
#Read in a pre-existing data sheet to extract information about the species
othervariables <- read_csv("final_model_export.csv") %>%
select(species_name,
biogeog,
taxon,
class,
max_depth,
max_length,
endemism,
IUCN,
IUCN_category,
date_assessed) %>%
mutate(biogeog = recode(biogeog,
`cool (temperate)` = "temperate (cool)",
`warm (temperate)` = "temperate (warm)"))
#Bind results data frames together
alltime_change <- bind_rows(result_algae, result_coral, result_inverts, result_fish)
#add other information for plotting
alltime_change <- alltime_change %>%
select(species_name,
slope,
intercept,
p_value,
decade_change_lwr,
decade_change_upr,
se,
sd_residuals,
aic,
bic,
error_flag,
sig,
decade_change,
thirtyyear_change,
fourteenyear_change) %>%
left_join(othervariables, by = "species_name")
#add in column with direction of change
alltime_change <- alltime_change %>%
mutate(slope_category = ifelse(slope < 0, "declining", "increasing"))
#Remove species with singularity errors from data frame for exporting
alltime_change <- alltime_change %>%
filter(error_flag != "Singular Fit") %>%
select(-error_flag)
alltime_change <- alltime_change %>%
mutate(biogeog = recode(biogeog,
`cool (temperate)` = "temperate (cool)",
`warm (temperate)` = "temperate (warm)"))
#Decade decline plots
alltime_change$taxon <- factor(alltime_change$taxon, levels = c("Macroalgae", "Invertebrate", "Vertebrate"))
alltime_change$biogeog <- factor(alltime_change$biogeog, levels = c("temperate (cool)", "temperate (warm)", "tropical"))
#ENDEMICS
all_species_endemic <- alltime_change %>%
filter(endemism == "endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
all_species_non_endemic <- alltime_change %>%
filter(endemism == "non-endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
View(all_species_endemic)
result_inverts <- tibble(
species_name = character(),
slope = numeric(),
intercept = numeric(),
intercept1990 = numeric(),
intercept1991 = numeric(),
p_value = numeric(),
ci_low_intercept = numeric(),
ci_high_intercept = numeric(),
ci_low_slope = numeric(),
ci_high_slope = numeric(),
se = numeric(),
sd_residuals = numeric(),
aic = numeric(),
bic = numeric(),
error_flag = character()  #Column to track the error flag
)
for (i in unique(inverts_data$species_name)) {
mod_data_inverts <-
inverts_data %>%
filter(species_name == i)
# Check the number of unique levels of site_code for each species_name
unique_levels <- n_distinct(inverts_data$site_code)
if (unique_levels <= 1) {
warning(paste("Species", i, "has only one level of site_code. Consider using a different grouping variable."))
next  # Skip to the next iteration
}
# Fit the mixed-effects model
tryCatch({inverts_model <- lmerTest::lmer(log_count ~ survey_year + (1|site_code), data = mod_data_inverts)
intercept <- lme4::fixef(inverts_model)[1] %>% as.numeric()
slope <- lme4::fixef(inverts_model)[2] %>% as.numeric()
#Determine the reference year from the data = 1992
reference_year <- min(mod_data_inverts$survey_year)
#Calculate intercept at year 1990 & 1991
intercept1990 <- intercept + slope * (1990 - reference_year)
intercept1991 <- intercept + slope * (1991 - reference_year)
# Check if the model has a singular fit
if (isSingular(inverts_model)) {
error_flag <- "Singular Fit"  # Set the error flag
} else {
error_flag <- ""  # No error flag
# Extracting p-value
p_value <- summary(inverts_model)$coefficients[2, "Pr(>|t|)"]
ci <- confint(inverts_model, method = "Wald")
ci_low_intercept <- ci["(Intercept)", 1]
ci_high_intercept <- ci["(Intercept)", 2]
ci_low_slope <- ci["survey_year", 1]
ci_high_slope <- ci["survey_year", 2]
se <- summary(inverts_model)$coefficients[2, "Std. Error"]
sd_residuals <- summary(inverts_model)$sigma
aic <- AIC(inverts_model)
bic <- BIC(inverts_model)
}
output <- summary(object = inverts_model)
result_inverts <- result_inverts %>%
add_row(species_name = i, slope = slope,
intercept = intercept,
intercept1990 = intercept1990,
intercept1991 = intercept1991,
p_value = p_value,
ci_low_intercept = ci_low_intercept,
ci_high_intercept = ci_high_intercept,
ci_low_slope = ci_low_slope,
ci_high_slope = ci_high_slope,
se = se,
sd_residuals = sd_residuals,
aic = aic,
bic = bic,
error_flag = error_flag) %>%
mutate(sig = case_when(p_value <= 0.001 ~ "***",
p_value <= 0.01  ~ "**",
p_value <= 0.05  ~ "*",
TRUE ~ "")) }, error = function(e) {
cat("Error occurred for species:", i, "\n")
cat("Error message:", conditionMessage(e), "\n")
})
}
#Determining % change (1992 - 2024)
result_inverts <- result_inverts %>%
mutate(y_1992 = 10^(intercept+(slope*1992)),
y_2024 = 10^(intercept+(slope*2024)),
y_1992_lwr = 10^(intercept+(ci_low_slope*1992)),
y_2024_lwr = 10^(intercept+(ci_low_slope*2024)),
y_1992_upr = 10^(intercept+(ci_high_slope*1992)),
y_2024_upr = 10^(intercept+(ci_high_slope*2024))
) %>%
mutate(difference = (y_2024-y_1992),
difference_lwr = y_2024_lwr-y_1992_lwr,
difference_upr = y_2024_upr-y_1992_upr) %>%
mutate(thirtyyear_change = (difference/y_1992)*100,
thirtyyear_change_lwr = (difference_lwr/y_1992_lwr)*100,
thirtyyear_change_upr = (difference_upr/y_1992_upr)*100)
#Determining % change (decade change)
result_inverts <- result_inverts %>%
mutate(y_2013 = 10^(intercept+(slope*2013)),
y_2023 = 10^(intercept+(slope*2023)),
y_2013_lwr = 10^(intercept+(ci_low_slope*2013)),
y_2023_lwr = 10^(intercept+(ci_low_slope*2023)),
y_2013_upr = 10^(intercept+(ci_high_slope*2013)),
y_2023_upr = 10^(intercept+(ci_high_slope*2023))
) %>%
mutate(diff = (y_2023-y_2013),
diff_lwr = y_2023_lwr-y_2013_lwr,
diff_upr = y_2023_upr-y_2013_upr) %>%
mutate(decade_change = (diff/y_2013)*100,
decade_change_lwr = (diff_lwr/y_2013_lwr)*100,
decade_change_upr = (diff_upr/y_2013_upr)*100)
result_coral <- tibble(
species_name = character(),
slope = numeric(),
intercept = numeric(),
intercept2007 = numeric(),
intercept2008 = numeric(),
p_value = numeric(),
ci_low_intercept = numeric(),
ci_high_intercept = numeric(),
ci_low_slope = numeric(),
ci_high_slope = numeric(),
se = numeric(),
sd_residuals = numeric(),
aic = numeric(),
bic = numeric(),
error_flag = character()  # New column to track the error flag
)
for (i in unique(coral_data$species_name)) {
mod_data_coral <- coral_data %>% filter(species_name == i)
# Check the number of unique levels of site_code for each species_name
unique_levels <- n_distinct(coral_data$site_code)
if (unique_levels <= 1) {
warning(paste("Species", i, "has only one level of site_code. Consider using a different grouping variable."))
next  # Skip to the next iteration
}
# Fit the mixed-effects model
tryCatch({coral_model <- lmerTest::lmer(log_cover ~ survey_year + (1|site_code), data = mod_data_coral)
intercept <- lme4::fixef(coral_model)[1] %>% as.numeric()
slope <- lme4::fixef(coral_model)[2] %>% as.numeric()
#Determine the reference year from the data = 2008
reference_year <- min(mod_data_coral$survey_year)
#Calculate intercept at year 2007 & 2008
intercept2007 <- intercept + slope * (2007 - reference_year)
intercept2008 <- intercept + slope * (2008 - reference_year)
# Check if the model has a singular fit
if (isSingular(coral_model)) {
error_flag <- "Singular Fit"  # Set the error flag
} else {
error_flag <- ""  # No error flag
# Extracting p-value
p_value <- summary(coral_model)$coefficients[2, "Pr(>|t|)"]
ci <- confint(coral_model, method = "Wald")
ci_low_intercept <- ci["(Intercept)", 1]
ci_high_intercept <- ci["(Intercept)", 2]
ci_low_slope <- ci["survey_year", 1]
ci_high_slope <- ci["survey_year", 2]
se <- summary(coral_model)$coefficients[2, "Std. Error"]
sd_residuals <- summary(coral_model)$sigma
aic <- AIC(coral_model)
bic <- BIC(coral_model)
# Extract residuals
residuals <- residuals(coral_model)
}
output <- summary(object = coral_model)
result_coral <- result_coral %>%
add_row(species_name = i, slope = slope,
intercept = intercept,
intercept2007 = intercept2007,
intercept2008 = intercept2008,
p_value = p_value,
ci_low_intercept = ci_low_intercept,
ci_high_intercept = ci_high_intercept,
ci_low_slope = ci_low_slope,
ci_high_slope = ci_high_slope,
se = se,
sd_residuals = sd_residuals,
aic = aic,
bic = bic,
error_flag = error_flag) %>%
mutate(sig = case_when(p_value <= 0.001 ~ "***",
p_value <= 0.01  ~ "**",
p_value <= 0.05  ~ "*",
TRUE ~ ""))
}, error = function(e) {
cat("Error occurred for species:", i, "\n")
cat("Error message:", conditionMessage(e), "\n")
})
}
#Determining % change (2008 - 2022)
result_coral <- result_coral %>%
mutate(y_2008 = 10^(intercept+(slope*2008)),
y_2022 = 10^(intercept+(slope*2022)),
y_2008_lwr = 10^(intercept+(ci_low_slope*2008)),
y_2022_lwr = 10^(intercept+(ci_low_slope*2022)),
y_2008_upr = 10^(intercept+(ci_high_slope*2008)),
y_2022_upr = 10^(intercept+(ci_high_slope*2022))
) %>%
mutate(difference = (y_2022-y_2008),
difference_lwr = y_2022_lwr-y_2008_lwr,
difference_upr = y_2022_upr-y_2008_upr) %>%
mutate(fourteenyear_change = (difference/y_2008)*100,
fourteenyear_change_lwr = (difference_lwr/y_2008_lwr)*100,
fourteenyear_change_upr = (difference_upr/y_2008_upr)*100)
#Determining % change (decade change)
result_coral <- result_coral %>%
mutate(y_2012 = 10^(intercept+(slope*2012)),
y_2022 = 10^(intercept+(slope*2022)),
y_2012_lwr = 10^(intercept+(ci_low_slope*2012)),
y_2022_lwr = 10^(intercept+(ci_low_slope*2022)),
y_2012_upr = 10^(intercept+(ci_high_slope*2012)),
y_2022_upr = 10^(intercept+(ci_high_slope*2022))
) %>%
mutate(diff = (y_2022-y_2012),
diff_lwr = y_2022_lwr-y_2012_lwr,
diff_upr = y_2022_upr-y_2012_upr) %>%
mutate(decade_change = (diff/y_2012)*100,
decade_change_lwr = (diff_lwr/y_2012_lwr)*100,
decade_change_upr = (diff_upr/y_2012_upr)*100)
#Read in a pre-existing data sheet to extract information about the species
othervariables <- read_csv("final_model_export.csv") %>%
select(species_name,
biogeog,
taxon,
class,
max_depth,
max_length,
endemism,
IUCN,
IUCN_category,
date_assessed) %>%
mutate(biogeog = recode(biogeog,
`cool (temperate)` = "temperate (cool)",
`warm (temperate)` = "temperate (warm)"))
##############################Full time series #####################
#Bind results data frames together
alltime_change <- bind_rows(result_algae, result_coral, result_inverts, result_fish)
#add other information for plotting
alltime_change <- alltime_change %>%
select(species_name,
slope,
intercept,
p_value,
decade_change_lwr,
decade_change_upr,
se,
sd_residuals,
aic,
bic,
error_flag,
sig,
decade_change,
thirtyyear_change,
fourteenyear_change) %>%
left_join(othervariables, by = "species_name")
#add in column with direction of change
alltime_change <- alltime_change %>%
mutate(slope_category = ifelse(slope < 0, "declining", "increasing"))
#Remove species with singularity errors from data frame for exporting
alltime_change <- alltime_change %>%
filter(error_flag != "Singular Fit") %>%
select(-error_flag)
#Note - no species with singularity errors
#Export this final list - 1992 - 2024
#write_csv(alltime_change, "alltime_change.csv")
alltime_change <- alltime_change %>%
mutate(biogeog = recode(biogeog,
`cool (temperate)` = "temperate (cool)",
`warm (temperate)` = "temperate (warm)"))
#Decade decline plots
alltime_change$taxon <- factor(alltime_change$taxon, levels = c("Macroalgae", "Invertebrate", "Vertebrate"))
alltime_change$biogeog <- factor(alltime_change$biogeog, levels = c("temperate (cool)", "temperate (warm)", "tropical"))
#ENDEMICS
all_species_endemic <- alltime_change %>%
filter(endemism == "endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
all_species_non_endemic <- alltime_change %>%
filter(endemism == "non-endemic") %>%
mutate(new = case_when(
decade_change >= 0 ~ "Least Concern",
decade_change >= -29.99 & decade_change < 0 ~ "Near Threatened",
decade_change >= -49.99 & decade_change < -29 ~ "Vulnerable",
decade_change >= -79.99 & decade_change < -50 ~ "Endangered",
decade_change >= -100 & decade_change < -80 ~ "Critically Endangered"
))
View(all_species_endemic)
write_csv(all_species_endemic, "all_species_endemic.csv")
write_csv(all_species_non_endemic, "all_species_nonendemic.csv")
library(arrow)
install.packages("arrow")
library(arrow)
library(knitr)
library(tidyverse)
library(janitor)
library(lubridate)
library(lme4)
library(lmerTest)
library(dplyr)
library(data.table)
library(zoo, include.only = "na.approx")
library(ggforce, include.only = "facet_col")
# "not in" function
`%!in%` <- Negate(`%in%`)
# convert the csv to parquet
fish <- read_csv("ep_m1_2024.csv)
# convert the csv to parquet
fish <- read_csv("ep_m1_2024_csv)
# convert the csv to parquet
fish <- read_csv("ep_m1_2024_csv")
# convert the csv to parquet
fish <- read_csv("ep_m1_2024_csv")
# convert the csv to parquet
fish <- read_csv("ep_m1_2024_csv")
library(knitr)
library(tidyverse)
library(janitor)
library(lubridate)
library(lme4)
library(lmerTest)
library(dplyr)
library(data.table)
library(zoo, include.only = "na.approx")
library(ggforce, include.only = "facet_col")
library(arrow)
# convert the csv to parquet
fish <- read_csv("ep_m1_2024.csv")
# convert the csv to parquet
fish <- read_csv("ep_m1_aus_2024.csv")
write_parquet(fish, "ep_m1_aus_2024.parquet")
# convert the csv to parquet
algae <- read_csv("ep_m3_2024.csv")
write_parquet(fish, "ep_m3_2024.parquet")
write_parquet(algae, "ep_m3_2024.parquet")
# convert the csv to parquet
algae <- read_csv("ep_m3_2024.csv")
write_parquet(algae, "ep_m3_2024.parquet")
#| include = FALSE
library(knitr)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
# save csv files for each step?
save_csv <- TRUE
library(knitr)
library(tidyverse)
library(janitor)
library(lubridate)
library(lme4)
library(lmerTest)
library(dplyr)
library(data.table)
library(zoo, include.only = "na.approx")
library(ggforce, include.only = "facet_col")
# "not in" function
`%!in%` <- Negate(`%in%`)
# Raw in-situ (ATRC) Algae data
algae_raw <- read_csv("ep_m3_2024.parquet",
show_col_types = FALSE)
# RLS/ATRC Method 1 (fish)
# RLS/ATRC Method 1 (fish)
fish_raw <-
read_csv("ep_m1_aus_2024.parquet",
show_col_types = FALSE) %>%
filter(method != 10) %>% #remove seagrass surveys and keep rocky reef records only
mutate(survey_date = as.Date(survey_date, format = "%d/%m/%Y")) %>%
mutate(blocks_per_transect = n_distinct(block), .by = survey_id, survey_date) %>% #summarise the total number of blocks for each transect
select(survey_id, species_name, blocks_per_transect, site_code, latitude, longitude, survey_date, method, phylum, class, order, family, total) #keep all columns needed going forward
