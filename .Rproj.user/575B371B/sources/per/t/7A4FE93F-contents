---
title: "Macroalgal and mobile macro-invertebrate species face high extinction risk - part 1: cleaning"
author: "Olivia J. Johnson, Freddie J. Heather & Camille Mellin"
date: "`r Sys.Date()`"
output: 
  rmdformats::downcute:
  # bookdown::html_document2:
    code_folding: show
---

# About this script

The following document provides the R code for the analysis for the paper: Johnson *et al.* (in review.) Macroalgal and mobile macro-invertebrate species face high extinction risk

**\*Corresponding author:**
[olivia.johsnon\@utas.edu.au](mailto:olivia.johsnon@utas.edu.au){.email}

+------------------------+-------------------------------------------------------------------------------------------------------+
| **R-version**          | 4.4.1 (2024-06-14 ucrt) -- "Race for Your Life"                                                        |
+------------------------+-------------------------------------------------------------------------------------------------------+
| **platform**           | x86_64-w64-mingw32/x64                                                                                   |
+------------------------+-------------------------------------------------------------------------------------------------------+
| **Article DOI**        |                                                                                                       |
+------------------------+-------------------------------------------------------------------------------------------------------+
| **Article link**       |                                                                                                       |
+------------------------+-------------------------------------------------------------------------------------------------------+
| **Article citation**   | Johnson *et al.* (in review.) Macroalgal and mobile macro-invertebrate species face high extinction risk |
+------------------------+-------------------------------------------------------------------------------------------------------+
| **Time series**        | 1992 - 2024                                                                                              |
+------------------------+-------------------------------------------------------------------------------------------------------+
| **Geographical scale** | Continental Australia                                                                                 |
+------------------------+-------------------------------------------------------------------------------------------------------+
| **Code author contact**| olivia.johnson@utas.edu.au                                                                            |
+------------------------+-------------------------------------------------------------------------------------------------------+

# Set-up

```{r knitr-options}
#| include = FALSE

library(knitr)
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE
)

# save csv files for each step?
save_csv <- TRUE

```

# Loading packages
Load in all required packages for this analysis
```{r packages}

library(knitr)
library(tidyverse)
library(janitor)
library(lubridate)
library(lme4)
library(lmerTest)
library(dplyr)
library(data.table)
library(zoo, include.only = "na.approx")
library(ggforce, include.only = "facet_col")
library(data.table)

# "not in" function
`%!in%` <- Negate(`%in%`)
```

#Cleaning script
The code for cleaning the raw data is available below  - 
The raw data is in a wide format and is publicly available to download from 
https://portal.aodn.org.au/ - if you would like the latest version of data you 
will need to download this raw data before proceeding with running the cleaning
code. 

```{r obs-data-import}

# Raw in-situ (ATRC) Algae data
algae_raw <- read_csv("ep_m3_2024.csv", 
                      show_col_types = FALSE)

# RLS/ATRC Method 1 (fish)
# RLS/ATRC Method 1 (fish)
fish_raw <- 
  read_csv("ep_m1_aus_2024.csv", 
           show_col_types = FALSE) %>% 
  filter(method != 10) %>% #remove seagrass surveys and keep rocky reef records only
  mutate(survey_date = as.Date(survey_date, format = "%d/%m/%Y")) %>%
  mutate(blocks_per_transect = n_distinct(block), .by = survey_id, survey_date) %>% #summarise the total number of blocks for each transect
  select(survey_id, species_name, blocks_per_transect, site_code, latitude, longitude, survey_date, method, phylum, class, order, family, total) #keep all columns needed going forward

#Average counts at a transect level  
fish <- fish_raw %>%
group_by(survey_id, species_name, blocks_per_transect) %>%
  summarise(totalabundance_pertransect = sum(total, na.rm = TRUE)) %>% #summarise all counts for a single species on a transect
  mutate(abundance_per250 = (totalabundance_pertransect) / blocks_per_transect, 
         abundance_per50 = abundance_per250/5) %>% #divide summarised species abundance by the number of blocks to get a value for that species on a single transect
  ungroup()

#Other information to add back in to averaged transect data
fish_raw <- fish_raw %>%
  distinct(survey_id, species_name, site_code, latitude, longitude, survey_date, method, phylum, class, order, family) #keep all columns needed going forward

#join data frames back together
fish <- fish %>%
  left_join(fish_raw, by = c("species_name", "survey_id"))


# RLS/ATRC Method 2 (cryptic fish only)
cryptic_fish_raw <- 
  read_csv("ep_m2_cryptic_fish_aus_2024.csv", 
           show_col_types = FALSE) %>% 
  mutate(survey_date = as.Date(survey_date, format = "%Y-%m-%d")) %>% #change survey date format
  mutate(blocks_per_transect = n_distinct(block), .by = survey_id, survey_date) %>% #summarise the total number of blocks for each transect
  select(survey_id, species_name, blocks_per_transect, site_code, latitude, longitude, survey_date, method, phylum, class, order, family, total)
  

#Average counts at a transect level  
cryptic_fish <- cryptic_fish_raw %>%
group_by(survey_id, species_name, blocks_per_transect) %>%
  summarise(totalabundance_pertransect = sum(total, na.rm = TRUE)) %>% #summarise all counts for a single species on a transect
  mutate(abundance_per50 = (totalabundance_pertransect) / blocks_per_transect) %>% #divide summarised species abundance by the number of blocks to get a value for that species on a single transect
  ungroup()  
  
#Other information to add back in to averaged transect data
cryptic_fish_raw <- cryptic_fish_raw %>%
  distinct(survey_id, species_name, site_code, latitude, longitude, survey_date, method, phylum, class, order, family) #keep all columns needed going forward

#join data frames back together
cryptic_fish <- cryptic_fish %>%
  left_join(cryptic_fish_raw, by = c("species_name", "survey_id"))


# RLS/ATRC Method 2 (invertebrates only)
inverts_raw <- read_csv("ep_m2_inverts_aus_2024.csv", 
                        show_col_types = FALSE) %>%
  mutate(survey_date = as.Date(survey_date, format = "%d/%m/%Y")) %>%
  mutate(blocks_per_transect = n_distinct(block), .by = survey_id, survey_date) %>% #summarise the total number of blocks for each transect
  mutate(totalabundance_pertransect = sum(total, na.rm = TRUE), .by = c(survey_id, species_name)) %>% #summarise all counts for a single species on a transect
  mutate(abundance_per50 = (totalabundance_pertransect / blocks_per_transect)) #divide summarised species abundance by the number of blocks to get a value for that species on a single transect


#Photoquadrat data - extracting coral data only
coral_raw <- read_csv("PQ_FullRes_infilled_2024.csv", 
                      show_col_types = FALSE)

```

# Data Cleaning

## Algae

Here, I will use the +30 years of ATRC data which has been entered as
NRNM "M3" data and will filter this data to extract just the "algal"
phylum only (i.e. remove substrate type and other sessile invertebrate
species). This also requires amalgamating data for species that have had
taxonomic name changes over time, and importantly, species that were not
morphologically distinct enough to be consistently recognised by all
in-situ data records were additionally removed from the analysis.

Temperate algae data is scored in a point-count method via a quadrat
with 50 points - I will convert this data so that it is on a percentage
cover (multiply totals by 2, to convert to % cover) and take an average for a 
species in a site*year combination, before transforming the data. 

### Filtering species

```{r algae-filtering}
# Total number of species being considered in raw data (n = 801):
num_species <- 
  algae_raw %>%
  distinct(species_name) %>%
  nrow()

# filter (and keep) out phylum containing algae only, taxonomic name changes, and species that were not morphologically distinctive enough to be consistently recognised by all in-situ data records (verified list by G. Edgar)

algae_rmspp <- 
  algae_raw %>% 
  filter(phylum %in% c("algae", 
                       "Heterokontophyta",
                       "Rhodophyta",
                       "Chlorophyta",
                       "Tracheophyta",
                       "Ochrophyta")) %>% 
  filter(str_detect(species_name, "[A-Z]{1}[a-z]+\\s{1}[a-z]+$")) %>% 
  filter(!str_detect(species_name, "Unidentified")) %>% 
  filter(!str_detect(species_name, "\\[")) %>% 
  filter(!str_detect(species_name, "sp\\.")) %>% 
  filter(!str_detect(species_name, "spp\\.")) %>%
  filter(species_name %!in% c("Ritterella pedunculata",
                              "Herdmania grandis",
                              "Anthothoe albocincta",
                              "Ostrea angasi",
                              "Phlyctenanthus australis",
                              "Pyura australis",
                              "Mytilus galloprovincialis",
                              "Bare rock",
                              "Turf/sand/sediment matrix",
                              "Zonaria turneriana/angustata",
                              "Cladophora prolifera",
                              "Sargassum podacanthum",
                              "Codium galeatum",
                              "Bornetia binderiana",
                              "Holotrichia comosa",
                              "Sargassum distichum",
                              "Dictyota naevosa",
                              "Mesophyllum incisum",
                              "Hymenena curdieana",
                              "Acrosorium ciliolatum",
                              "Platoma cyclocolpum",
                              "Gracilaria secundata",
                              "Dictyomenia sonderi",
                              "Peltasta australis",
                              "Homoeostrichus sinclairii",
                              "Dictyota fastigiata",
                              "Grateloupia filicina",
                              "Phacelocarpus alatus",
                              "Callophyllis lambertii",
                              "Dictyota paniculata",
                              "Acrotylus australis",
                              "Jania pulchella",
                              "Delisea hypneoides",
                              "Gelinaria ulvoidea",
                              "Carpopeltis phyllophora",
                              "Cephalocystis furcellata",
                              "Wrangelia nobilis",
                              "Ptilota hannafordii",
                              "Rhodymenia verrucosa",
                              "Laurencia filiformis",
                              "Scinaia tsinglanensis",
                              "Rhodymenia leptophylla",
                              "Distromium multifidum",
                              "Codium fragile",
                              "Pterocladiella capillacea",
                              "Protokuetzingia australasica",
                              "Hypnea pannosa", 
                              "Grateloupia turuturu", 
                              "Taonia australasica", 
                              "Rhodophyllis multipartita", 
                              "Phymatolithon masonianum", 
                              "Coelarthrum opuntia", 
                              "Delisea elegans",
                              "Hymenena affinis", 
                              "Griffithsia monilis", 
                              "Rhodymenia obtusa", 
                              "Halymenia plana",
                              "Tsengia feredayae", 
                              "Champia stipitata", 
                              "Ptilonia australasica",
                              "Jania sagittata",
                              "Kallymenia tasmanica",
                              "Pseudobryopsis hainanensis", 
                              "Mychodea carnosa", 
                              "Craspedocarpus venosus", 
                              "Craspedocarpus tenuifolius", 
                              "Rhodymenia wilsonis",
                              "Nizymenia australis", 
                              "Codium duthieae", 
                              "Nizymenia furcata", 
                              "Dictyota gunniana", 
                              "Plocamium costatum", 
                              "Chondria incrassata", 
                              "Gracilaria preissiana", 
                              "Exallosorus olsenii",
                              "Curdiea angustata",
                              "Chlanidophora microphylla", 
                              "Amansia rhodantha", 
                              "Gelidium asperum", 
                              "Cladostephus spongiosus",
                              "Rhodopeltis australis", 
                              "Phacelocarpus sessilis",
                              "Rhodopeltis borealis",
                              "Laurencia majuscula",
                              "Sargassum paradoxum",
                              "Sporochnus radiciformis",
                              "Coelarthrum cliftonii", 
                              "Jania rosea",
                              "Erythroclonium sonderi", 
                              "Nizymenia conferta", 
                              "Gelidium australe", 
                              "Tylotus obtusatus", 
                              "Codium harveyi", 
                              "Sonderophycus coriaceus",
                              "Myriodesma integrifolium", 
                              "Acrosorium minus", 
                              "Champia zostericola",
                              "Callophycus serratus",
                              "Acanthophora dendroides",
                              "Rhodymenia prolificans", 
                              "Hymenocladia usnea", 
                              "Zonaria diesingiana", 
                              "Halopeltis australis", 
                              "Stypopodium flabelliforme", 
                              "Polysiphonia blandii",
                              "Zonaria turneriana", 
                              "Dictyota nigricans", 
                              "Jania micrarthrodia",
                              "Plocamium cirrhosum", 
                              "Rhodymenia sonderi", 
                              "Mychodea aciculare", 
                              "Phacelocarpus apodus", 
                              "Peyssonnelia novaehollandiae",
                              "Laurencia clavata", 
                              "Myriogramme gunniana",
                              "Melanthalia abscissa", 
                              "Polyopes constrictus",
                              "Distromium flabellatum",
                              "Carpopeltis elata",
                              "Callophycus laxus",
                              "Euptilocladia spongiosa",
                              "Sargassum spinuligerum", 
                              "Cladosiphon filum", 
                              "Dasya extensa", 
                              "Corallina officinalis", 
                              "Encyothalia cliftonii", 
                              "Dicranema revolutum", 
                              "Dictyopteris plagiogramma", 
                              "Nitospinosa tasmanica", 
                              "Echinothamnion mallardiae",
                              "Sargassum oligocystum", 
                              "Sargassum lacerifolium", 
                              "Erythroclonium muelleri", 
                              "Amphiroa gracilis", 
                              "Myriodesma tuberosum", 
                              "Sargassum linearifolium", 
                              "Heterosiphonia muelleri", 
                              "Sargassum ligulatum",
                              "Zostera nigricaulis",
                              "Chaetomorpha billardierii")) %>% 
  mutate(survey_year = year(survey_date)) %>% 
  # ensure species that have had a taxonomic name change over time have the data points merged together (these species highlighted by GE)
  mutate(species_name = case_when(
    species_name == "Caulerpa annulata" ~ "Caulerpa hodgkinsoniae",
    species_name == "Sargassum decipiens" ~ "Phyllotricha varians",
    species_name == "Sargassum varians" ~ "Phyllotricha decipiens",
    species_name == "Sargassum verruculosum" ~ "Phyllotricha verruculosa", 
    species_name == "Sargassum heteromorphum" ~ "Sargassopsis heteromorphum", 
    TRUE ~ species_name
  )) %>% 
  select(
    survey_id,
    site_code,
    location,
    area,
    ecoregion,
    survey_year,
    phylum,
    species_name,
    quadrat,
    habitat_groups,
    total,
    taxon,
    latitude,
    longitude) %>% 
  as_tibble()  

#Algae latitude and longitude dataframe
algae_lat_lons <-
  algae_raw %>% 
  drop_na(latitude, longitude) %>% 
  summarise(latitude = mean(latitude), 
            longitude = mean(longitude), 
            .by = site_code)

```

### Cleaning counts

```{r}
#Filters the algae_rmspp dataframe to keep only those rows where the total value is less than or equal to 50 for percentage cover conversions. This helps in removing any single observations greater than 50

# algae_clean <- 
algae_bysurv <- 
  algae_rmspp %>% 
  filter(total <= 50) %>% # keep single observations less than or equal to 50 
  mutate(percentcover_per_quadrat = total*2) %>% #convert from point count to percentage cover 
  summarise(cover_per_surveyid = mean(percentcover_per_quadrat), #Summarise mean quadrat cover for each survey
            .by = c(species_name, 
                    survey_id,
                    site_code,
                    location,
                    ecoregion,
                    survey_year,
                    total,
                    percentcover_per_quadrat)) 

#Determine the number of unique transects (survey_id) conducted at a site in a given year
nsurveys_bysiteyear <- 
algae_bysurv %>% 
  select(survey_id, site_code, survey_year) %>% 
  distinct() %>% 
  count(site_code, survey_year, name = "nsurveys_bysiteyr")

#For every transect (survey_id) divide the percent cover for a species by 5 quadrats to determine average % cover for that species at a site in a given year. Summarise the total percentage cover for a species at a site in a given year divided by the total number of surveys (survey_id) to get the final av % cover for that species at a site. 
algae_bysurv <- algae_bysurv %>% 
  summarise(SUM_cover_persurveyid = sum(cover_per_surveyid), 
            .by = c(site_code, survey_year, species_name)) %>% 
  mutate(av_percentcover_site = SUM_cover_persurveyid/5) %>% #this is a sum of above for the total % cover of a species, divided by the 5 quadrats in a survey level
  left_join(nsurveys_bysiteyear) %>% 
  mutate(cover_bysiteyr = av_percentcover_site/nsurveys_bysiteyr)


```

### Dealing with NAs

We want NA values to be changed to zeros when all of the following
conditions are met:

1.  The site was surveyed that year.
2.  The species was observed at least once at that site in any other year.
3.  The species was recorded at that site at that year.

To do this we need to make a list of all the site\*year combinations,
all site\*species combinations, and all site\*year\*taxon combinations
**that have at least one observation**. If the row in question has a
site\*year combination that is found in the overall site\*year
combination list, then we know that site was surveyed in that year and
therefore meets the first condition. We repeat for the first three
conditions, if all three are met and the count is NA, we replace with a
zero value.

```{r algae-naconvert}
# site*year combinations
#Filter out rows where cover is "NA" or "0", select distinct combinations of 'site_code' and 'survey_year'
#Create a new column 'site_code_yr' which concatenates 'site_code' and 'survey_year'
algae_spp_sites <- 
  algae_bysurv %>% 
  select(species_name, site_code) %>%
  distinct() %>% 
  arrange(site_code, species_name)

# site*year*species combinations
#Similar to previous step, but combining 'site_code' and 'species_name' to create the new column 'site_code_spp'
algae_yrs_sites <- 
  algae_bysurv %>% 
  select(survey_year, site_code) %>%
  distinct() %>% 
  arrange(site_code, survey_year)

#This step nests the 'species_name' column by 'site_code'
algae_spp_sites_nested <- 
  algae_spp_sites %>% 
  nest(spp = species_name)


#Join 'algae_site_byyear' with 'algae_site_byspp_nested' by 'site_code'
#Unnest the data, join algae clean to bring in 'cover_bysiteyr' data
#join with 'algae_lats_lons" to bring in latitude and longitude data
#Replace 'NA' values in cover_bysiteyr with '0' and compute the square root transformation to 'cover_bysiteyr'

algae_data_addingzeros <-
  algae_yrs_sites %>%
  left_join(algae_spp_sites_nested) %>%
  unnest(cols = spp) %>%
  left_join(algae_bysurv %>%
              select(species_name,
                     site_code,
                     survey_year,
                     cover_bysiteyr)) %>%
  left_join(algae_lat_lons, by = join_by(site_code)) %>%
  mutate(cover_bysiteyr = replace_na(cover_bysiteyr, 0)) %>%
  mutate(sqrt_cover = sqrt(cover_bysiteyr)) 

  
#Transforming by log (as a check)
#Accounting for a log transformation with zeros
################ MinN attempt ##############
# Calculate the minimum density per species per site
min_density <- 
  algae_data_addingzeros %>%
  filter(cover_bysiteyr > 0) %>%
  summarise(minN = min(cover_bysiteyr), 
            .by = c(species_name)) #change this from site_code and species_name to just species_name 
                                  #This is then the minimum value for the species overall and not just at a site level

# Join the min_density table to the main species count table
algae_data_with_minN <- 
  algae_data_addingzeros %>%
  left_join(min_density, by = c("species_name")) %>% 
  mutate(site_yr = paste(site_code, survey_year, sep = "_"))

# #export a data sheet here for mapping sites later on
# file_name <- "algae_mappingsites_2024.csv"
# write.csv(algae_data_with_minN, file_name, row.names = FALSE)

# this will be used as the main dataframe
algae_data <- 
  algae_data_with_minN |> 
  mutate(latitude  = round(latitude),
         longitude = round(longitude)) |> 
  mutate(grid_cell = paste(latitude, longitude)) %>% 
  mutate(transect_id = paste(site_code, survey_year, sep = "_")) %>% 
  mutate(n_sites_byspp = n(), 
         .by = c(site_code, species_name)) %>% 
  mutate(n_obs_byspp = n(), .by = c(species_name)) %>% 
  mutate(log_cover = log10(cover_bysiteyr + minN)) %>%  # Use minN for log transformation
  filter(n_sites_byspp >= 4) %>% # n_sites_byspp = number of years in site*spp combination  
  filter(n_distinct(site_code) >= 30, # number of unique sites per spp
         .by = species_name) 


```

## Fish

Here, I will load in all fish data, this includes M1 data and all
"cryptic fish" scored in M2 that has been separated into their own data
set from the NRMN (both ATRC and RLS).

As M1 fish and M2 fish are scored on a different scale/different search
efforts, I will ensure all counts for fish are (reduced for M1) measured
on a 50m2 scale. Additionally, ANY and ALL fish sighted on M1 surveys
are recorded, so to ensure cryptic fish counts made on a M1 survey are
counted towards the trend of the species, M1 and cryptic fish datasets
will be combined, scaled to 50m2 (also to take into account the two
blocks per survey), filtered from 2008 on wards, in a site\*year
combination (due to the case there may be multiple surveys at one site
during a year). To prevent inflation of certain species, the fish data
will be logged before any modelling occurs.

```{r}
#combine raw fish (M1) and cryptic fish (M2) datasets
fish_combined <-
  fish %>%
  bind_rows(cryptic_fish) %>%
  mutate(site_yr = paste(site_code, year(survey_date), sep = "_"),
         survey_year = year(survey_date)) %>%
  mutate(transects_persiteyr = n_distinct(survey_id), .by = c(site_code, survey_year))

# Step 1: Group by species and method, then calculate the mean abundance (N)
mean_abundance_by_method <- fish_combined %>%
  group_by(species_name, method) %>%
  summarise(mean_N = mean(abundance_per50, na.rm = TRUE), .groups = 'drop')

# Step 2: For each species, identify which method has the highest mean abundance
best_method_per_species <- mean_abundance_by_method %>%
  group_by(species_name) %>%
  filter(mean_N == max(mean_N)) %>%
  ungroup()

# Step 3: Filter the original dataset to keep only the records of the best method per species
filtered_fish_combined <- fish_combined %>% 
  left_join(best_method_per_species, by = c("species_name", "method")) %>% 
  filter(!is.na(mean_N))

#rename to continue with code below:
fish_combined <- filtered_fish_combined

# remove incorrectly named species
fish_filtered <- 
  fish_combined %>%
  filter(phylum == "Chordata") %>% 
  filter(class %in% c("Actinopterygii",
                      "Elasmobranchii",
                      "Teleostei",
                      "Actinopteri")) %>%
  filter(str_detect(species_name, "[A-Z]{1}[a-z]+\\s{1}[a-z]+$")) %>% 
  filter(!str_detect(species_name, "Unidentified")) %>% 
  filter(!str_detect(species_name, "\\[|\\]")) %>%
  filter(!str_detect(species_name, "\\[")) %>% 
  filter(!str_detect(species_name, "sp\\.")) %>% 
  filter(!str_detect(species_name, "spp\\.")) %>% 
  mutate(species_name = case_when(species_name == "Apogon doederleini" ~ "Ostorhinchus doederleini", TRUE ~ species_name)) %>%
  mutate(species_name = case_when(species_name == "Apogon victoriae" ~ "Ostorhinchus victoriae", TRUE ~ species_name)) %>%
  mutate(species_name = case_when(species_name == "Apogon limenus" ~ "Ostorhinchus limenus", TRUE ~ species_name)) %>%
  mutate(species_name = case_when(species_name == "Stegastes fasciolatus" ~ "Plectroglyphidodon fasciolatus", TRUE ~ species_name)) %>%
  mutate(species_name = case_when(species_name == "Cetoscarus bicolor" ~ "Cetoscarus ocellatus", TRUE ~ species_name)) %>%
  mutate(species_name = case_when(species_name == "Amphiprion akindynos" ~ "Amphiprion mccullochi", TRUE ~ species_name))
```

### Cleaning counts

```{r}
#Create a dataframe that contains information that might be needed later
sitesurvey_info_fish <- fish_filtered %>%
  select(survey_year, site_code, site_yr, blocks_per_transect, transects_persiteyr)

sitesurvey_info_fish <- sitesurvey_info_fish %>%
  select(site_code, survey_year, transects_persiteyr) %>%
  distinct()

#create a dataframe "survey_list" which contains the other data which may be
# some lat, lon are very slightly different (e.g. survey_id == 923400036)
fish_survey_list <-
  fish_filtered %>%
  select(site_yr,
         site_code,
         survey_id,
         survey_year,
         latitude,
         longitude) %>%
  distinct() %>%
  summarise(latitude = mean(latitude),
            longitude = mean(longitude),
            .by = c(site_yr,
                    site_code,
                    survey_id,
                    survey_year))

```

### Dealing with NAs

We want NA values to be changed to zeros when all of the following
conditions are met:

1.  The site was surveyed that year.
2.  The species was observed at least once at that site in any other year.
3.  The species was recorded at that site at that year.

To do this we need to make a list of all the site\*year combinations,
all site\*species combinations, and all site\*year\*taxon combinations
**that have at least one observation**. If the row in question has a
site\*year combination that is found in the overall site\*year
combination list, then we know that site was surveyed in that year and
therefore meets the first condition. We repeat for the first three
conditions, if all three are met and the count is NA, we replace with a
zero value.
```{r fish-nacovnert}

# all species*site combinations
fish_spp_sites <- 
  fish_filtered %>% 
  select(species_name, site_code) %>%
  distinct() %>% 
  arrange(site_code, species_name)

# all site*year combinations
fish_yrs_sites <- 
  fish_filtered %>% 
  select(survey_year, site_code) %>%
  distinct() %>% 
  arrange(site_code, survey_year)

# All of the species seen at that site
# nested so that we have a single row per site to join to the yrs_sites dataframe
fish_spp_sites_nested <- 
  fish_spp_sites %>% 
  nest(spp = species_name)

# all all possible species at a site expanded by the surveyed years
# NAs converted to zero
fish_data_addingzeros <- 
  fish_yrs_sites %>% 
  left_join(fish_spp_sites_nested, by = "site_code") %>% 
  unnest(cols = spp, names_sep = "_nested") %>% 
  rename(species_name = spp_nestedspecies_name) %>%
  mutate(abundance_per50 = NA) %>%
  mutate(abundance_per50 = ifelse(is.na(abundance_per50), 0, abundance_per50)) %>%
  mutate(abundance_per50 = as.numeric(abundance_per50)) 


#select columns needed
fish_filtered <- fish_filtered %>%
  select(survey_year, site_code, species_name, abundance_per50)

#now left join with fish_filtered dataframe 
fish_data_addingzeros <- fish_data_addingzeros %>%
  rbind(fish_filtered, fish_data_addingzeros)

#Data check for any remaining NA values per 50m2
fish_data_addingzeros |> filter(is.na(abundance_per50)) |> nrow()
fish_data_addingzeros |> filter(abundance_per50==0) |> nrow()


#Averaging abundance_per50 for a site*year combination
#For a single species at a site, summarise all of their abundance_per50 records
fish_data_addingzeros <- fish_data_addingzeros %>%
  group_by(species_name, site_code, survey_year) %>%
  summarise(summed_abundanceper50_persiteyr = sum(abundance_per50, na.rm = TRUE), .groups = 'drop')

#add in sitesummary_info that is now needed
fish_data_addingzeros <- fish_data_addingzeros %>%
  left_join(sitesurvey_info_fish %>% select(survey_year, site_code, transects_persiteyr), 
            by = c("survey_year", "site_code"))

#Determine average for a species for a site in a given year
avspp_persiteyr <- fish_data_addingzeros %>%
  mutate(avspp_persiteyr = summed_abundanceper50_persiteyr/ transects_persiteyr)  #Mean species per site per year - divide mean species per transect

#Accounting for a log transformation with zeros
################ MinN attempt ##############
# Calculate the minimum density per species per site
min_density <- 
  avspp_persiteyr %>%
  filter(avspp_persiteyr > 0) %>%
  summarise(minN = min(avspp_persiteyr), 
            .by = c(species_name)) 

# Join the min_density table to the main species count table
fish_data_with_minN <- 
  avspp_persiteyr %>%
  left_join(min_density, by = c("species_name")) %>% 
  mutate(site_yr = paste(site_code, survey_year, sep = "_"))

# export a data sheet here for mapping sites later on
 # file_name <- "fish_mappingsites_2024.csv"
 # write.csv(fish_data, file_name, row.names = FALSE)

#Final data frame for modelling 
fish_data <- 
  fish_data_with_minN %>% 
  left_join(fish_survey_list %>% 
              summarise(latitude = mean(latitude), 
                        longitude = mean(longitude), 
                        .by = site_yr), 
            by = join_by(site_yr)) %>% 
  mutate(grid_cell = paste(latitude, longitude)) %>% #create a grid cell column
  mutate(latitude = round(latitude),
         longitude = round(longitude), 
         log_count = log10(avspp_persiteyr + minN)) %>%  # Use minN for log transformation
  mutate(year = substr(site_yr, nchar(site_yr) - 3, nchar(site_yr)) %>% 
           as.numeric(),
         site_code = substr(site_yr, 1, nchar(site_yr) - 5)) %>% 
  add_count(site_code, species_name, name = "n_site_species") %>% 
  filter(n_site_species >= 4) %>% # n_sites_byspp = number of years in site*spp combination - minimum of 3, GE has suggested 10
  filter(n_distinct(site_code) >= 30, # number of unique sites per spp
         .by = species_name)

```

## Invertebrates

Here, I will load in all method 2 (M2) invertebrate data from the NRMN, comprised
of ATRC and RLS data. Invertebrates are surveyed on a 50m2 scale. As a check to 
make sure there are no cryptic fish in this dataset as they are scored in M2, 
filter to ensure there are no observations with the phylum "Chordata" in the 
dataset, and the data is representative of observations to the species level.                                                      
To prevent inflation of certain species, the invertebrate data will be logged
before any modelling occurs.

```{r}
sum(is.na(inverts_raw$total))

#first let's check what "Phylum" groups are contained in the "invertebrate raw" dataframe
inverts_raw %>% 
  filter(phylum == "Chordata") %>% 
  nrow()
# data should have ZERO Chordates - 2275 observations found, filter out below

#filter (and keep) inverts columns
inverts_clean <- 
  inverts_raw %>% 
  filter(str_detect(species_name, "[A-Z]{1}[a-z]+\\s{1}[a-z]+$")) %>% 
  filter(!str_detect(species_name, "Unidentified")) %>% 
  mutate(survey_year = year(survey_date)) %>% 
  mutate(transects_persiteyr = n_distinct(survey_id), .by = c(site_code, survey_year)) %>%
  filter(!str_detect(species_name, "\\[|\\]")) %>%
  filter(!str_detect(species_name, "\\[")) %>% 
  filter(!str_detect(species_name, "sp\\.")) %>% 
  filter(!str_detect(species_name, "spp\\.")) %>%
  filter(phylum %!in% c("Chordata")) %>%
  filter(species_name %!in% c("Asthenosoma varium",
                              "Equichlamys bifrons",
                              "Oxycomanthus bennetti",
                              "Cronia avellana",
                              "Neothyonidium magnum",
                              "Mimachlamys asperrima",
                              "Cenolia glebosus",
                              "Tropiometra afra",
                              "Pecten fumatus",
                              "Tripneustes australiae", 
                              "Tripneustes gratilla", #remove the Tripneustes genus - name changes/inconsistent records for study
                              "Phyllacanthus irregularis")) %>% #remove due to inconsistent counts by divers over time 
  dplyr::select(
    survey_id,
    site_code,
    location,
    area,
    ecoregion,
    survey_year,
    phylum,
    class,
    species_name,
    size_class,
    taxon,
    latitude,
    longitude,
    blocks_per_transect,
    transects_persiteyr,
    abundance_per50) %>% 
  as_tibble() 

#After inspecting the dataset there are multiple species with NA values for class. Fill in the gaps where possible:

inverts_clean <- inverts_clean %>%
  mutate(class = ifelse(species_name == "Pseudoceros indicus" & is.na(class), "Rhabditophora", class))

inverts_clean <- inverts_clean %>%
  mutate(class = ifelse(species_name == "Pseudoceros scintillatus" & is.na(class), "Rhabditophora", class))

####

#Seastar species with two spelling versions of species name - amend to current WoRMS listing:
inverts_clean$species_name[inverts_clean$species_name == "Pentagonaster dubeni"] <- "Pentagonaster duebeni" 

#Update to P. chabrus name according to WoRMS
inverts_clean <- inverts_clean %>%
  mutate(species_name = ifelse(species_name == "Plagusia chabrus", "Guinusia chabrus", species_name))

inverts_clean <- inverts_clean %>%
  mutate(taxon = ifelse(taxon == "Plagusia chabrus", "Guinusia chabrus", taxon))

#Comanthus to Cenolia
inverts_clean <- inverts_clean %>%
  mutate(species_name = ifelse(species_name == "Comanthus tasmaniae", "Cenolia tasmaniae", species_name))

inverts_clean <- inverts_clean %>%
  mutate(taxon = ifelse(taxon == "Comanthus tasmaniae", "Cenolia tasmaniae", taxon))

#Pterynotus to Pterochelus at genus level
inverts_clean <- inverts_clean %>%
  mutate(species_name = ifelse(species_name == "Pterynotus triformis", "Pterochelus triformis", species_name))

inverts_clean <- inverts_clean %>%
  mutate(taxon = ifelse(taxon == "Pterynotus triformis", "Pterochelus triformis", taxon))

#Update to Calcinus minutus
inverts_clean <- inverts_clean %>%
  mutate(taxon = ifelse(taxon == "Clibanarius seurati", "Calcinus minutus", taxon))

inverts_clean <- inverts_clean %>%
  mutate(species_name = ifelse(species_name == "Clibanarius seurati", "Calcinus minutus", species_name))

#Update to Mariaglaja inornata
inverts_clean <- inverts_clean %>%
  mutate(taxon = ifelse(taxon == "Chelidonura inornata", "Mariaglaja inornata", taxon))

inverts_clean <- inverts_clean %>%
  mutate(species_name = ifelse(species_name == "Chelidonura inornata", "Mariaglaja inornata", species_name))

#Update to Goniobranchus thompsoni
inverts_clean <- inverts_clean %>%
  mutate(taxon = ifelse(taxon == "Chromodoris thompsoni", "Goniobranchus thompsoni", taxon))

inverts_clean <- inverts_clean %>%
  mutate(species_name = ifelse(species_name == "Chromodoris thompsoni", "Goniobranchus thompsoni", species_name))


# #Inconsistent records of Goniocidaris tubaria and "Goniocidaris impressa"

#There are sites where Goniocidaris impressa and Goniocidaris tubaria will not have been ID correctly
#As per G. Edgar's recommendations, if any G. impressa is recorded at a site then call all records of "Goniocidaris" at that site, G impressa or vice versa depending on the species.
#This may need to be done on a "location" basis, as the records should be changed for the area not just the "site" level. i.e. not all Ninepin point sites have the same site_code labeling.

#See the number records, locations and sites where both species of Goniocidaris is recorded
locations_with_both_species <- inverts_clean %>%
  filter(species_name %in% c("Goniocidaris impressa", "Goniocidaris tubaria")) %>%
  group_by(location) %>%
  filter(n_distinct(species_name) == 2) %>%
  count(location, species_name) %>%
  ungroup() %>%
  add_count(location, name = "total_records")

#There are 40 sites where both species are recorded and 13 locations - make the changes at a location level rather than site

#Where Goniocidaris impressa and Goniocidaris impressa have both been recorded at the one site/location change any records for consistency/mis-identification. Data changes have been recommended and confirmed with G. Edgar before being made below: 

#Port Phillip Heads - change G.tubaria records to G.impressa 
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Port Phillip Heads" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Port Phillip Heads" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Encounter - change G.impressa records to G.tubaria 
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Encounter" & species_name == "Goniocidaris impressa",
                           "Goniocidaris tubaria", species_name),
         taxon = if_else(location == "Encounter" & taxon == "Goniocidaris impressa",
                    "Goniocidaris tubaria", taxon))

#D'Entrecasteaux & Derwent - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "D'Entrecasteaux & Derwent" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "D'Entrecasteaux & Derwent" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Tinderbox - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Tinderbox" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Tinderbox" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Ninepin Point - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Ninepin Point" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Ninepin Point" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Tasmania - South East - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Tasmania - South East" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Tasmania - South East" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Bicheno - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Bicheno" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Bicheno" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Tasmania - North East - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Tasmania - North East" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Tasmania - North East" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Port Davey - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Port Davey" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Port Davey" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Maria Island - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Maria Island" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Maria Island" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Tasmania - North - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Tasmania - North" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
         taxon = if_else(location == "Tasmania - North" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#King Island - change G.tubaria records to G.impressa
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "King Island" & species_name == "Goniocidaris tubaria",
                           "Goniocidaris impressa", species_name),
    taxon = if_else(location == "King Island" & taxon == "Goniocidaris tubaria",
                    "Goniocidaris impressa", taxon))

#Jervis Bay - change G.impressa records to G.tubaria
inverts_clean <- inverts_clean %>%
  mutate(species_name = if_else(location == "Jervis Bay" & species_name == "Goniocidaris impressa",
                           "Goniocidaris tubaria", species_name),
    taxon = if_else(location == "Jervis Bay" & taxon == "Goniocidaris impressa",
                    "Goniocidaris tubaria", taxon))

#Re-run to check and ensure there are no sites with two names for Goniocidaris - above works, results is zero
#See the number of locations where both species of Goniocidaris is recorded
# locations_with_both_species <- inverts_clean %>%
#   filter(species_name %in% c("Goniocidaris impressa", "Goniocidaris tubaria")) %>%
#   group_by(location) %>%
#   filter(n_distinct(species_name) == 2) %>%
#   distinct(location)


#Inverts additional information for later
inverts_survey_list <- 
  inverts_clean %>% 
  select(site_code,
         survey_id,
         location,
         ecoregion,
         survey_year,
         phylum,
         species_name,
         taxon,
         latitude,
         longitude) %>% 
  distinct() %>%
  mutate(site_yr = paste(site_code, survey_year, sep = "_")) %>%
  summarise(latitude = mean(latitude),
            longitude = mean(longitude),
            .by = c(site_yr, 
                    site_code, 
                    survey_id,
                    survey_year))


#Create a dataframe that contains information that might be needed later
sitesurvey_info_inverts <- inverts_clean %>%
  mutate(site_yr = paste(site_code, survey_year, sep = "_")) %>%
  select(survey_year, site_code, site_yr, blocks_per_transect, transects_persiteyr)

sitesurvey_info_inverts <- sitesurvey_info_inverts %>%
  select(site_code, survey_year, transects_persiteyr) %>%
  distinct()

```

### Dealing with NAs

We want NA values to be changed to zeros when all of the following
conditions are met:

1.  The site was surveyed that year.
2.  The species was observed at least once at that site in any other year.
3.  The species was recorded at that site at that year.

To do this we need to make a list of all the site\*year combinations,
all site\*species combinations, and all site\*year\*taxon combinations
**that have at least one observation**. If the row in question has a
site\*year combination that is found in the overall site\*year
combination list, then we know that site was surveyed in that year and
therefore meets the first condition. We repeat for the first three
conditions, if all three are met and the count is NA, we replace with a
zero value.
```{r}
# all species*site combinations
inverts_spp_sites <- 
  inverts_clean %>% 
  select(species_name, site_code) %>%
  distinct() %>% 
  arrange(site_code, species_name)

# all site*year combinations
inverts_yrs_sites <- 
  inverts_clean %>% 
  select(survey_year, site_code) %>%
  distinct() %>% 
  arrange(site_code, survey_year)

# All of the species seen at that site
# nested so that we have a single row per site to join to the yrs_sites dataframe
inverts_spp_sites_nested <- 
  inverts_spp_sites %>% 
  nest(spp = species_name)


# all all possible species at a site expanded by the surveyed years
# NAs converted to zero
inverts_data_addingzeros <- 
 inverts_yrs_sites %>% 
  left_join(inverts_spp_sites_nested, by = "site_code") %>% 
  unnest(cols = spp) %>% 
  mutate(abundance_per50 = NA) %>%
  mutate(abundance_per50 = ifelse(is.na(abundance_per50), 0, abundance_per50)) %>%
  mutate(abundance_per50 = as.numeric(abundance_per50)) 
  
#select columns needed
inverts_filtered <- inverts_clean %>%
  select(survey_year, site_code, species_name, abundance_per50)

#now left join with inverts_filtered dataframe 
inverts_data_addingzeros <- inverts_data_addingzeros %>%
  rbind(inverts_filtered, inverts_data_addingzeros)

#Data check for any remaining NA values per 50m2
inverts_data_addingzeros |> filter(is.na(abundance_per50)) |> nrow()
inverts_data_addingzeros |> filter(abundance_per50==0) |> nrow()


#Averaging abundance_per50 fora site*year combination
#For a single species at a site, summarise all of their abundance_per50 records
inverts_data_addingzeros <- inverts_data_addingzeros %>%
  group_by(species_name, site_code, survey_year) %>%
  summarise(summed_abundanceper50_persiteyr = sum(abundance_per50, na.rm = TRUE), .groups = 'drop')

#add in sitesummary_info that is now needed
inverts_data_addingzeros <- inverts_data_addingzeros %>%
  left_join(sitesurvey_info_inverts %>% select(survey_year, site_code, transects_persiteyr), 
            by = c("survey_year", "site_code"))

#Determine average for a species for a site in a given year
avspp_persiteyr_inverts <- inverts_data_addingzeros %>%
  mutate(avspp_persiteyr = summed_abundanceper50_persiteyr/ transects_persiteyr)  #Mean species per site per year - divide mean species per transect


################ MinN attempt ##############
# Calculate the minimum density per species per site
min_density_inverts <- 
  avspp_persiteyr_inverts %>%
  filter(avspp_persiteyr > 0) %>%
  summarise(minN = min(avspp_persiteyr), 
            .by = c(species_name)) 

# Join the min_density table to the main species count table
inverts_data_with_minN <- 
  avspp_persiteyr_inverts %>%
  left_join(min_density_inverts, by = c("species_name")) %>% 
  mutate(site_yr = paste(site_code, survey_year, sep = "_"))

# #export a data sheet here for mapping sites later on
  # file_name <- "inverts_mappingsites_2024.csv"
  # write.csv(inverts_data, file_name, row.names = FALSE)

inverts_data <- 
  inverts_data_with_minN %>% 
  left_join(inverts_survey_list %>% 
              summarise(latitude = mean(latitude), 
                        longitude = mean(longitude), 
                        .by = site_yr), 
            by = join_by(site_yr)) %>% 
  mutate(grid_cell = paste(latitude, longitude)) %>%  #grid cell column
  mutate(latitude = round(latitude),
         longitude = round(longitude), 
         log_count = log10(avspp_persiteyr + minN)) %>%  # Use minN for log transformation
  mutate(year = substr(site_yr, nchar(site_yr) - 3, nchar(site_yr)) %>% 
           as.numeric(),
         site_code = substr(site_yr, 1, nchar(site_yr) - 5)) %>% 
  add_count(site_code, species_name, name = "n_site_species") %>% 
  filter(n_site_species >= 4) %>% # n_sites_byspp = number of years in site*spp combination
  filter(n_distinct(site_code) >= 30, # number of unique sites per spp
         .by = species_name)

```

## Coral

Here, I will load in all coral data, from the RLS database - this data
is obtained through the photo-quadrats taken during the survey and then
these photos are scored to the highest taxonomic level by a coral
taxonomic expert, resulting in a coral percentage cover obtained through
analysis via a specialised program Squiddle+, a quincunx grid of 5
points was overlaid on each image and corals under each point were
recorded; thus, taxa under 100 points per transect are cataloged.

### Cleaning counts

```{r}

sum(is.na(coral_raw$percent_cover))

#first let's check what groups are contained in the "coral raw" data frame
summary_table_coral <- table(coral_raw$RLE_category)
#view(summary_table_coral) 

#change date format:
coral_raw <- coral_raw %>%
  mutate(survey_year = as.numeric(substring(survey_date, nchar(survey_date) - 3, nchar(survey_date))))

#filter (and keep) inverts columns
coral_clean <- 
  coral_raw %>% 
  filter(str_detect(label, "[A-Z]{1}[a-z]+\\s{1}[a-z]+$")) %>% 
  filter(str_detect(country, "Australia")) %>% 
  filter(str_detect(RLE_category, "Coral")) %>%
  filter(str_detect(label_scheme, "RLS Australian Coral Species List|RLS/Lord Howe Island")) %>%
  filter(!str_detect(label, "\\[|\\]")) %>% 
  filter(!str_detect(label, "\\bcorals\\b")) %>% 
  filter(!str_detect(label, "\\bcoral\\b")) %>% 
  filter(!str_detect(label, "\\bsp\\b")) %>%
  mutate(label = case_when(label == "Goniastrea australensis" ~ "Paragoniastrea australensis", 
                                  TRUE ~ label)) %>%
  as_tibble() %>% 
  rename(species_name = label) %>% 
  mutate(site_yr = paste(site_code, survey_year, sep = "_")) %>% 
  mutate(total_surveys_siteyr = n_distinct(dataset_id), #NOTE: using dataset_id as per E.O. recommendation to avoid duplication
         .by = c(site_yr,
                 species_name)) %>%
  mutate(sum_percent_cover_siteyr = sum(percent_cover), 
            .by = c(site_yr, 
                    species_name)) %>%
  mutate(final_percent_cover = sum_percent_cover_siteyr/total_surveys_siteyr)

#Create datframe for attributes that may be needed later
coral_list <- 
  coral_raw %>% 
  select(survey_id,
         site_code,
         location,
         area,
         species_name = label,
         survey_year,
         depth,
         percent_cover,
         latitude,
         longitude) %>% 
  distinct()

#Create dataframe for site level information
coral_site_list <- 
  coral_raw %>% 
  select(site_code,
         species_name = label,
         survey_year,
         latitude,
         longitude) %>% 
  distinct()

#coral latitude and longitude dataframe
coral_lat_lons <-
  coral_raw %>% 
  drop_na(latitude, longitude) %>% 
  summarise(latitude = mean(latitude), 
            longitude = mean(longitude), 
            .by = site_code)
```

### Dealing with NAs

We want NA values to be changed to zeros when all of the following
conditions are met:

1.  The site was surveyed that year.
2.  The species was observed at least once at that site in any other year.
3.  The species was recorded at that site at that year.

To do this we need to make a list of all the site\*year combinations,
all site\*species combinations, and all site\*year\*taxon combinations
**that have at least one observation**. If the row in question has a
site\*year combination that is found in the overall site\*year
combination list, then we know that site was surveyed in that year and
therefore meets the first condition. We repeat for the first three
conditions, if all three are met and the count is NA, we replace with a
zero value.
```{r}
# site*year combinations
#Filter out rows where cover is "NA" or "0", select distinct combinations of 'site_code' and 'survey_year'
#Create a new column 'site_code_yr' which concatenates 'site_code' and 'survey_year'
coral_spp_sites <- 
  coral_clean %>% 
  select(species_name, site_code) %>%
  distinct() %>% 
  arrange(site_code, species_name)

# site*year*species combinations
#Similar to previous step, but combining 'site_code' and 'species_name' to create the new column 'site_code_spp'
coral_yrs_sites <- 
  coral_clean %>% 
  select(survey_year, site_code) %>%
  distinct() %>% 
  arrange(site_code, survey_year)

#This step nests the 'species_name' column by 'site_code'
coral_spp_sites_nested <- 
  coral_spp_sites %>% 
  nest(spp = species_name)

#Join 'coral_site_byyear' with 'coral_site_byspp_nested' by 'site_code'
#Unnest the data, join coral clean to bring in 'percent cover' data
#join with 'coral_lats_lons" to bring in latitude and longitude data
#Replace 'NA' values in percent cover with '0' and compute the square root transformation to 'cover'

coral_data_addingzeros <- 
  coral_yrs_sites %>% 
  left_join(coral_spp_sites_nested) %>% 
  unnest(cols = spp) %>% 
  left_join(coral_clean %>% 
              select(species_name,
                     site_code, 
                     survey_year,
                     final_percent_cover)) %>% 
  left_join(coral_lat_lons, by = join_by(site_code)) %>% 
  mutate(final_percent_cover = replace_na(final_percent_cover, 0)) %>%
  mutate(sqrt_pcover = sqrt(final_percent_cover)) 

#Transforming by log (as a check)
#Accounting for a log transformation with zeros
################ MinN attempt ##############
# Calculate the minimum density per species per site
min_density <- 
  coral_data_addingzeros %>%
  filter(final_percent_cover > 0) %>%
  summarise(minN = min(final_percent_cover), 
            .by = c(species_name)) 

# Join the min_density table to the main species count table
coral_data_with_minN <- 
  coral_data_addingzeros %>%
  left_join(min_density, by = c("species_name")) %>% 
  mutate(site_yr = paste(site_code, survey_year, sep = "_"))

# #export a data sheet here for mapping sites later on
 # file_name <- "coral_mappingsites_2024.csv"
 # write.csv(coral_data_with_minN, file_name, row.names = FALSE)

#This will be used as the main dataframe
coral_data <- 
  coral_data_with_minN |> 
  mutate(latitude  = round(latitude),
         longitude = round(longitude)) |> 
  mutate(grid_cell = paste(latitude, longitude)) %>% #grid_cell column
  mutate(transect_id = paste(site_code, survey_year, sep = "_")) %>% 
  mutate(n_sites_byspp = n(), 
         .by = c(site_code, species_name)) %>% 
  mutate(n_obs_byspp = n(), .by = c(species_name)) %>% 
  mutate(log_cover = log10(final_percent_cover + minN)) %>%  # Use minN for log transformation
  filter(n_sites_byspp >= 4) %>% # n_sites_byspp = number of years in site*spp combination  
  filter(n_distinct(site_code) >= 30, # number of unique sites per spp
         .by = species_name) 
```

#Export all clean data files that will be used for modelling 
```{r - export all clean data files for modelling}
# #Algae
# file_name <- "algae_data_2024.csv"
# write.csv(algae_data, file_name, row.names = FALSE)
# 
# #Fish
# file_name <- "fish_data_2024.csv"
# write.csv(fish_data, file_name, row.names = FALSE)
# 
# #Inverts
# file_name <- "inverts_data_2024.csv"
# write.csv(inverts_data, file_name, row.names = FALSE)
# 
# #Coral
# file_name <- "coral_data_2024.csv"
# write.csv(coral_data, file_name, row.names = FALSE)

```
